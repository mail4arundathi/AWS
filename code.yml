AWSTemplateFormatVersion: '2010-09-09'
Description: Three-Tier Application Stack

Parameters:
  KeyName:
    Description: EC2 Key Pair for SSH Access
    Type: AWS::EC2::KeyPair::machine1
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Subnets
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: us-east-1a

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1b

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the web servers
      VpcId: !Ref MyVPC

  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the application servers
      VpcId: !Ref MyVPC

  # EC2 Instances (Web, App)
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-12345678 # Replace with your desired AMI

  AppServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref AppServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-12345678 # Replace with your desired AMI

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - us-east-1a
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet

  AppServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - us-east-1b
      LaunchConfigurationName: !Ref AppServerLaunchConfig
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet

  # Elastic Load Balancer
  MyELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '30'
        Timeout: '5'

  MyELBAttachment:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'

  # Route 53
  MyDNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: example.com.
      Comment: DNS record for the application
      Name: myapp.example.com.
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt MyELB.CanonicalHostedZoneNameID
        DNSName: !GetAtt MyELB.DNSName

Outputs:
  WebServerAutoScalingGroup:
    Description: Auto Scaling Group for Web Servers
    Value: !Ref WebServerAutoScalingGroup

  AppServerAutoScalingGroup:
    Description: Auto Scaling Group for Application Servers
    Value: !Ref AppServerAutoScalingGroup

  ELBEndpoint:
    Description: Endpoint of the Elastic Load Balancer
    Value: !GetAtt MyELB.DNSName
